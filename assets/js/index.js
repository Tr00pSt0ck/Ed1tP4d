const loadingScreen=document.getElementById('loadingScreen'); const ctaButton=document.getElementById('ctaButton'); const tryCtaButton=document.getElementById('tryCtaButton'); const navbar=document.getElementById('navbar'); const featureCards=document.querySelectorAll('.feature-card'); const tryContainer=document.querySelector('.try-container'); const particlesContainer=document.getElementById('particles'); const tryTextarea=document.getElementById('tryTextarea'); const tryWordCount=document.getElementById('tryWordCount'); const tryCharCount=document.getElementById('tryCharCount'); const tryLineCount=document.getElementById('tryLineCount'); const tryClear=document.getElementById('tryClear'); const tryCopy=document.getElementById('tryCopy'); const tryDownload=document.getElementById('tryDownload'); setTimeout(() => { loadingScreen.classList.add('hidden'); createParticles(); updateTryStats(); }, 1000); function createParticles() { const particleCount=30; for (let i=0; i<particleCount; i++) { const particle=document.createElement('div'); particle.classList.add('particle'); const size=Math.random()*10+2; const posX=Math.random()*100; const posY=Math.random()*100; const delay=Math.random()*5; const duration=Math.random()*10+10; particle.style.width=`${size}px`; particle.style.height=`${size}px`; particle.style.left=`${posX}%`; particle.style.top=`${posY}%`; particle.style.opacity=Math.random()*0.5+0.1; particle.style.animation=` float ${duration}s ease-in-out ${delay}s infinite alternate `; particlesContainer.appendChild(particle); } const style=document.createElement('style'); style.textContent=` @keyframes float { 0%{ transform:translate(0, 0); } 50%{ transform:translate(${Math.random()*50-25}px, ${Math.random()*50-25}px); } 100%{ transform:translate(${Math.random()*100-50}px, ${Math.random()*100-50}px); } } `; document.head.appendChild(style); } function updateTryStats() { const text=tryTextarea.value; const words=text.trim()?text.trim().split(/\s+/).length:0; const characters=text.length; const lines=text.split('\n').length; tryWordCount.textContent=words; tryCharCount.textContent=characters; tryLineCount.textContent=lines; } function goToDashboard() { document.body.style.opacity='0'; setTimeout(() => { window.location.href='dashboard.html'; }, 500); } ctaButton.addEventListener('click', goToDashboard); tryCtaButton.addEventListener('click', goToDashboard); window.addEventListener('scroll', () => { if (window.scrollY>50) { navbar.classList.add('scrolled'); } else { navbar.classList.remove('scrolled'); } animateOnScroll(); }); function animateOnScroll() { featureCards.forEach(card => { const position=card.getBoundingClientRect(); if (position.top<window.innerHeight-100) { card.classList.add('visible'); } }); const tryPosition=tryContainer.getBoundingClientRect(); if (tryPosition.top<window.innerHeight-100) { tryContainer.classList.add('visible'); } } tryTextarea.addEventListener('input', updateTryStats); tryClear.addEventListener('click', () => { if (confirm('Clear all text in the editor?')) { tryTextarea.value=''; updateTryStats(); } }); tryCopy.addEventListener('click', () => { tryTextarea.select(); document.execCommand('copy'); alert('Text copied to clipboard!'); }); tryDownload.addEventListener('click', () => { const text=tryTextarea.value; if (!text) { alert('Please add some text before downloading.'); return; } const blob=new Blob([text], { type:'text/plain' }); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='editpad_document.txt'; document.body.appendChild(a); a.click(); setTimeout(() => { document.body.removeChild(a); URL.revokeObjectURL(url); }, 100); alert('Document downloaded!'); }); setTimeout(animateOnScroll, 500); document.head.innerHTML += '<style>body { transition:opacity 0.5s ease; }</style>';