const textArea=document.getElementById('textArea'); const clearBtn=document.getElementById('clearBtn'); const saveBtn=document.getElementById('saveBtn'); const copyBtn=document.getElementById('copyBtn'); const downloadBtn=document.getElementById('downloadBtn'); const wordCount=document.getElementById('wordCount'); const charCount=document.getElementById('charCount'); const docStatus=document.getElementById('docStatus'); const themeToggle=document.getElementById('themeToggle'); const clearModal=document.getElementById('clearModal'); const confirmClear=document.getElementById('confirmClear'); const cancelClear=document.getElementById('cancelClear'); const loadingScreen=document.getElementById('loadingScreen'); const pwaBanner=document.getElementById('pwaBanner'); const pwaInstall=document.getElementById('pwaInstall'); const pwaDismiss=document.getElementById('pwaDismiss'); const downloadWarningModal=document.getElementById('downloadWarningModal'); const confirmDownloadWarning=document.getElementById('confirmDownloadWarning'); let deferredPrompt; let isAppInstalled=localStorage.getItem('editpadInstalled')==='true'; setTimeout(() => { loadingScreen.classList.add('hidden'); }, 1000); function updateCount() { const text=textArea.value; const words=text.trim()?text.trim().split(/\s+/).length:0; const characters=text.length; wordCount.textContent=`Words:${words}`; charCount.textContent=`Characters:${characters}`; } clearBtn.addEventListener('click', () => { if (textArea.value) { clearModal.style.display='flex'; } }); confirmClear.addEventListener('click', () => { textArea.value=''; updateCount(); docStatus.textContent='Cleared'; clearModal.style.display='none'; setTimeout(() => { docStatus.textContent='Unsaved'; }, 2000); }); cancelClear.addEventListener('click', () => { clearModal.style.display='none'; }); window.addEventListener('click', (e) => { if (e.target===clearModal) { clearModal.style.display='none'; } if (e.target===downloadWarningModal) { downloadWarningModal.style.display='none'; } }); saveBtn.addEventListener('click', () => { localStorage.setItem('editpadContent', textArea.value); docStatus.textContent='Saved'; setTimeout(() => { docStatus.textContent='Saved locally'; }, 2000); }); copyBtn.addEventListener('click', () => { if (textArea.value) { textArea.select(); document.execCommand('copy'); docStatus.textContent='Copied to clipboard!'; setTimeout(() => { docStatus.textContent='Unsaved'; }, 2000); } }); downloadBtn.addEventListener('click', () => { const text=textArea.value; if (!text) { downloadWarningModal.style.display='flex'; return; } const blob=new Blob([text], { type:'text/plain' }); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='editpad_document.txt'; document.body.appendChild(a); a.click(); setTimeout(() => { document.body.removeChild(a); URL.revokeObjectURL(url); }, 100); docStatus.textContent='Downloaded'; setTimeout(() => { docStatus.textContent='Unsaved'; }, 2000); }); confirmDownloadWarning.addEventListener('click', () => { downloadWarningModal.style.display='none'; }); themeToggle.addEventListener('click', () => { document.body.classList.toggle('dark-theme'); const icon=themeToggle.querySelector('i'); if (document.body.classList.contains('dark-theme')) { icon.classList.remove('fa-moon'); icon.classList.add('fa-sun'); document.body.style.background='linear-gradient(135deg, #2c3e50, #1a1a2e)'; } else { icon.classList.remove('fa-sun'); icon.classList.add('fa-moon'); document.body.style.background='linear-gradient(135deg, #6e8efb, #a777e3)'; } }); window.addEventListener('DOMContentLoaded', () => { const savedContent=localStorage.getItem('editpadContent'); if (savedContent) { textArea.value=savedContent; docStatus.textContent='Loaded from save'; setTimeout(() => { docStatus.textContent='Saved locally'; }, 2000); } updateCount(); }); textArea.addEventListener('input', updateCount); window.addEventListener('beforeinstallprompt', (e) => { e.preventDefault(); deferredPrompt=e; const bannerDismissed=localStorage.getItem('editpadBannerDismissed')==='true'; if (!isAppInstalled&&!bannerDismissed) { setTimeout(() => { pwaBanner.classList.add('show'); }, 3000); } }); pwaInstall.addEventListener('click', async () => { if (!deferredPrompt) return; deferredPrompt.prompt(); const { outcome }=await deferredPrompt.userChoice; if (outcome==='accepted') { console.log('User accepted the install prompt'); isAppInstalled=true; localStorage.setItem('editpadInstalled', 'true'); } else { console.log('User dismissed the install prompt'); } pwaBanner.classList.remove('show'); deferredPrompt=null; }); pwaDismiss.addEventListener('click', () => { pwaBanner.classList.remove('show'); localStorage.setItem('editpadBannerDismissed', 'true'); }); window.addEventListener('appinstalled', () => { console.log('PWA was installed'); isAppInstalled=true; localStorage.setItem('editpadInstalled', 'true'); }); if ('serviceWorker' in navigator) { window.addEventListener('load', () => { navigator.serviceWorker.register('sw.js') .then((registration) => { console.log('SW registered:', registration); }) .catch((registrationError) => { console.log('SW registration failed:', registrationError); }); }); }